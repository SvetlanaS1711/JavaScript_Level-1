'use strict';

/*
1. Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999, мы должны получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 мы должны получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект.
*/

//Запрос у пользователя числа
//let number = +prompt('Введите целое число в диапазоне от 0 до 999.');

//Генерация случайного числа
let number = Math.floor((Math.random() - .5) * 1998);
// Сначала из Math.random() вычитаем 0.5. Интервал возвращаемых Math.random() значений включает значения от 0 до 1 Вычитая из результата 0.5, смещаем данный интервал до следующего: [-.5, .5]. Позже умножаем полученное число на 1998 и интервал генерируемых значений содержит уже числа от -999 до +999 (не включительно).

//Функция разбивает число по разрядам и возвращает объект с разбивкой по разрядам
function transformToObj(number) {
    if (!Number.isInteger(number) || number < 0 || number > 999) {
        console.log('Ошибка: Значение аргумента должно быть целым числом в диапазоне 0...999');
        return {};
    } // Проверка введенного числа на соответствие требованиям, в таком случае - вывод пустого объекта

    return {
        digitUnits: number % 10,
        digitTens: Math.floor(number / 10) % 10,
        digitHundreds: Math.floor(number / 100),
    };
}

console.log(number);
console.log(transformToObj(number));



/*
2.Продолжить работу с интернет-магазином:
2.1. В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
2.2. Реализуйте такие объекты.
2.3. Перенести функционал подсчета корзины на объектно-ориентированную базу.
*/


const cart = { // Объект корзины
    goods: [  // Свойство со списком товаров (Массив ушел в свойство объекта)
        {
            goodId: 11111,
            goodName: 'Процессор',
            goodPrice: 16000,
            goodQantity: 2
        },
        {
            goodId: 22222,
            goodName: 'Видеокарта',
            goodPrice: 30000,
            goodQantity: 4
        },
        {
            goodId: 33333,
            goodName: 'Жесткий диск',
            goodPrice: 3000,
            goodQantity: 6
        },
        {
            goodId: 44444,
            goodName: 'Оперативная память',
            goodPrice: 2500,
            goodQantity: 8
        },
        {
            goodId: 55555,
            goodName: 'Материнская плата',
            goodPrice: 8000,
            goodQantity: 10
        }
    ],

    //Метод подсчета итоговой стоимости товаров (метод объекта)
    totalCartPrice(cart) {
        return this.goods.reduce((totalPrice, cart) => totalPrice + cart.goodPrice * cart.goodQantity, 0);
    }
    //Метод reduce() применяет функцию reducer к каждому элементу массива (слева-направо), возвращая одно результирующее значение.Используется для последовательной обработки каждого элемента массива с сохранением промежуточного результата (передает промежуточный результат/аккумулятор, в которое все собирается).

};
console.log(cart.totalCartPrice(cart));

